@page "/ShoppingCart"
@inject AppState appState
@inject ShoppingCartService shoppingCartService
@if (Model != null && Model.CartItems.Count() > 0)
{
    <div class="panel panel-info">
        <div class="panel-heading">
            <h3 class="panel-title">Order Summary</h3>
        </div>
        <div class="panel-body">
            <div id="update-message">
            </div>
            <table class="table table-striped table-hover ">
                <thead>
                    <tr>
                        <th>
                            Item Name
                        </th>
                        <th>
                            Price (each)
                        </th>
                        <th>
                            Quantity
                        </th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var item in Model.CartItems)
                {
                    <tr>
                        <td></td>
                        <td>
                            @item.Item.Price.ToString("N2") $
                        </td>
                        <td>
                            @item.Count.ToString()
                        </td>
                        <td>
                            <a style="cursor:pointer" onclick="@(async()=> await removeFromCart(item.ItemId))">Remove From Cart</a>
                        </td>
                    </tr>
                }
                <tr class="info">
                    <td></td>
                    <td></td>
                    <td></td>
                    <td id="cart-total">
                        Total : @Model.CartTotal.ToString("N2") $
                    </td>
                </tr>
            </table>
        </div>
    </div>
}
else
{
    <div>
        <p>
            There are no items in your cart currently. Please shop for something and add items..
        </p>
    </div>
}

@functions
{
    ShoppingCartViewModel Model;

    protected override async Task OnInitAsync()
    {
        Model = await shoppingCartService.shoppingCart();
    }

    protected async Task removeFromCart(int id)
    {
        var vm = await shoppingCartService.RemoveFromCart(id);
        var cartItem = Model.CartItems.FirstOrDefault(c => c.ItemId == id);
        Model.CartItems.Remove(cartItem);
        Model.CartTotal = vm.CartTotal;
        appState.setCartCount(vm.CartCount);
        StateHasChanged();
    }

}
