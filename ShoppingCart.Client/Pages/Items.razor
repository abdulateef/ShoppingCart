@page "/items"
@inject NavigationManager navigationManager
@inject AppState appState
@inject ShoppingCartService shoppingCartService
@layout ShoppingCartLayout 

@if (IsOpen)
{
    <div tabindex="-1" style="display:block" role="dialog" class="modal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">                
                <div class="modal-body">
                    <strong>An item was added to your cart.</strong>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="onclick">Continue</button>
                    <button type="button" class="btn btn-danger" @onclick="GoToCart">Check Out</button>
                </div>
            </div>
        </div>
    </div>
}



@if (items != null)
{
    <table class="table">
        <tr>
            <th>
                Category
            </th>
            <th>
                Name
            </th>
            <th>
                Price
            </th>
            <th>
                Picture
            </th>
            <th></th>
        </tr>
        @foreach (var item in items)
        {
            <tr>
                <td>
                    @item.Category.Name
                </td>
                <td>
                    @item.Name
                </td>
                <td>
                    @item.Price.ToString("N2") $
                </td>
                <td><img src="@item.ItemPictureUrl" width="150" /></td>
                <td>
                    <a style="cursor:pointer" @onclick="(() => addToCart(item.Id))">
                        Add
                        to cart
                    </a>
                </td>
            </tr>
        }
    </table>
}


@code {

    bool IsOpen { get; set; }
    int? cartCount { get; set; }
    List<Items> items;
    ShoppingCartRemoveViewModel model;
    void onclick()
    {
        IsOpen = !IsOpen;        
    }

    protected override async Task OnInitializedAsync()
    {
        items = await shoppingCartService.getItems();
    }

    protected async Task addToCart(int id)
    {
        model = await shoppingCartService.AddToCart(id);
        appState.setCartCount(model.CartCount);
        IsOpen = true;
        StateHasChanged();
    }


    void GoToCart()
    {
        IsOpen = false;
        navigationManager.NavigateTo("/MyShoppingCart");

    }


}
